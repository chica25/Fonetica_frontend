[{"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/App.js":"1","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/index.js":"2","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/LanguageList.js":"3","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/Home.js":"4","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/InteractiveMaps.js":"5","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/NavBar.js":"6","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/PhrasesByLanguage.js":"7","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/Phrases.js":"8","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/PhraseFormInput.js":"9","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/redux/actions/actionsCreator.js":"10"},{"size":837,"mtime":1612767535224,"results":"11","hashOfConfig":"12"},{"size":684,"mtime":1612768394391,"results":"13","hashOfConfig":"12"},{"size":878,"mtime":1612797832272,"results":"14","hashOfConfig":"12"},{"size":683,"mtime":1612799285956,"results":"15","hashOfConfig":"12"},{"size":169,"mtime":1612731911765,"results":"16","hashOfConfig":"12"},{"size":469,"mtime":1612731869326,"results":"17","hashOfConfig":"12"},{"size":621,"mtime":1612798021165,"results":"18","hashOfConfig":"12"},{"size":719,"mtime":1612799323858,"results":"19","hashOfConfig":"12"},{"size":812,"mtime":1612801480152,"results":"20","hashOfConfig":"12"},{"size":1125,"mtime":1612803309910,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1pw0jvn",{"filePath":"24","messages":"25","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/App.js",["45"],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/index.js",["46"],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/LanguageList.js",["47"],"import React from 'react';\nimport { connect } from 'react-redux'\n\n// function LanguageList(props) {\n\nconst LanguageList = (props) => {\n   \n        return(\n            <div className=\"language\">\n                {props.languages.map(lang => {\n                    return (\n                        <div key={lang.id}>\n                            <h3>{lang.language_name}</h3>\n                            <img className=\"flag-img\" src={lang.flag_image} width={80} height={60} mode='fit' />\n                            \n                        </div>\n                    )\n                })}\n            </div>\n           \n        )\n    \n    \n}\n\n// const mapStateToProps = (state) => ({\n//     languages: state.languages\n// })\n\n\nconst mapStateToProps = ({ languages }) => ({ languages })\n    // return { languages: languages }\n\nexport default connect(mapStateToProps)(LanguageList);\n","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/Home.js",[],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/InteractiveMaps.js",[],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/NavBar.js",[],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/PhrasesByLanguage.js",["48"],"import React from 'react';\nimport { connect } from 'react-redux'\n\nconst PhrasesByLanguage = (props) => {\n   \n            return(\n                    <div className=\"phrase\">\n                    {props.phrases.map(phrase => {\n                       return( <div key={phrase.id}> \n                       {phrase.english_language} <br></br> {phrase.foreign_language} \n                       {phrase.language_id}\n                    </div>\n                )\n            })} \n        </div>\n    ) \n}\n\n\nconst mapStateToProps = ({ phrases }) => ({ phrases });\n    \n\nexport default connect(mapStateToProps)(PhrasesByLanguage);\n\n\n","/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/Phrases.js",[],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/components/PhraseFormInput.js",[],"/Users/patriciacordero/Desktop/Flatiron_school_files/final_project/fonetica_frontend/src/redux/actions/actionsCreator.js",["49"],"// languages index action\nexport const fetchLanguages = () => {\n    return dispatch => {\n        fetch('http://localhost:3000/api/v1/languages')\n            .then(response => response.json())\n            .then(languages => dispatch({\n                type: 'SET_LANGUAGES',\n                payload: languages }))\n           }\n    }\n\n    // phrases index action\n\n    export const fetchLanguagePhrases = () => {\n        return dispatch => {\n            fetch(`http://localhost:3000/api/v1/languages/${languageId}/phrases`)\n            .then(response => response.json())\n            .then(languageId => dispatch({\n                type: 'SET_PHRASES_BY_LANGUAGE',\n                payload: languageId }))\n        }\n    }\n\n\n// phrases post action\n\nexport const fetchNewPhrase = (newData => {\n    return dispatch => {\n        const phrase = { phrase: newData }\n        fetch(`http://localhost:3000/api/v1/languages/${languageId}/phrases`, { method: 'POST', body: JSON.stringify()})\n        .then(response => response.json())\n        .then((phrases) => \n            dispatch({ type: \"NEW_PHRASE\" , payload: phrases })\n        }\n    }\n",{"ruleId":"50","severity":1,"message":"51","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":25},{"ruleId":null,"fatal":true,"severity":2,"message":"54","line":9,"column":10},{"ruleId":"55","severity":1,"message":"56","line":14,"column":29,"nodeType":"57","endLine":14,"endColumn":113},{"ruleId":null,"fatal":true,"severity":2,"message":"58","line":10,"column":55},{"ruleId":null,"fatal":true,"severity":2,"message":"59","line":34,"column":9},"no-unused-vars","'PhrasesByLanguage' is defined but never used.","Identifier","unusedVar","Parsing error: Identifier 'LanguageReducer' has already been declared\n\n   7 | import logger from 'redux-logger'; \n   8 | import { LanguageReducer } from '../reducers/LanguageReducer';\n>  9 | import { LanguageReducer } from '../reducers/LanguageReducer';\n     |          ^\n  10 | \n  11 | \n  12 | const store = createStore(LanguageReducer, LanguagePhraseReducer, compose(applyMiddleware(thunk, logger),","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Parsing error: Unexpected token, expected \"...\"\n\n   8 |                     {props.phrases.map(phrase => {\n   9 |                        return( <div key={phrase.id}> \n> 10 |                        {phrase.english_language} <br {phrase.foreign_language} \n     |                                                       ^\n  11 |                        {phrase.language_id}\n  12 |                     </div>\n  13 |                 )","Parsing error: Unexpected token, expected \",\"\n\n  32 |         .then((phrases) => \n  33 |             dispatch({ type: \"NEW_PHRASE\" , payload: phrases })\n> 34 |         }\n     |         ^\n  35 |     }\n  36 |"]